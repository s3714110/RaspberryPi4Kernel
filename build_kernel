#!/bin/bash
#This script will build and install new kernel on a Raspberry Pi 4

# exits the script when any command fails
set -e

# specifying all excutables' paths
readonly SUDO=/usr/bin/sudo
readonly APT=/usr/bin/apt

# installs all prerequisite packages
$SUDO $APT install -y raspberrypi-kernel-headers build-essential bc git wget bison flex libssl-dev make tar sed grep bc

# specifying all excutables' paths for newly installed packages and some file names
readonly RM=/bin/rm
readonly MKDIR=/bin/mkdir
readonly SED=/bin/sed
readonly MAKE=/usr/bin/make
readonly CP=/bin/cp
readonly GIT=/usr/bin/git
readonly BASH=/bin/bash
readonly PKILL=/usr/bin/pkill
readonly TAR=/bin/tar
readonly UNAME=/bin/uname
readonly FIRST_PERF_SCRIPT=first_perf_script
readonly SECOND_PERF_SCRIPT=second_perf_script
readonly REBOOT=/sbin/reboot

# stops other running scripts and exits itself if received an interrupting signal
trap stop_other_scripts SIGHUP SIGINT SIGTERM
stop_other_scripts() {
    # sends a USR1 signal to first performance script so it can exit, then kills the process
    $SUDO $PKILL --signal USR1 -f $FIRST_PERF_SCRIPT

    # sends a USR2 signal to second performance script so it can reset led and exit, then kills the process
    $SUDO $PKILL --signal USR2 -f $SECOND_PERF_SCRIPT
}

# creates a working directory for the scripts (deletes the folder if it already exists and creates a new one)
$SUDO $RM -r -f workdir; $MKDIR workdir
cd workdir || exit

# checks outs to my git repo using SSH (note: you will need a SSH key pair)
$GIT clone git@github.com:s3714110/RaspberryPi4Kernel.git

# creates a backup of the current kernel modules and compresses it into a tar file
$TAR -c -f kernel-backup.tar "/lib/modules/$($UNAME -r)"

# creates a backup of the boot folder and compresses it into a tar file
$TAR -c -f boot-backup.tar /boot

# clones the content of raspberry pi kernel repository
$GIT clone --depth=1 https://github.com/raspberrypi/linux
cd linux || exit

# creates a default config file for Raspberry Pi 4 model
KERNEL=kernel7l
$MAKE bcm2711_defconfig

# Modyfying config file
# appeneds my student number to the kernel verision
$SED -i '/^CONFIG_LOCALVERSION/s/.*/CONFIG_LOCALVERSION="-v7l-s3714110"/' .config
# disables support for video and camera
$SED -i '/^CONFIG_MEDIA_CAMERA_SUPPORT=/s/.*/# CONFIG_MEDIA_CAMERA_SUPPORT is not set/' .config

# runs first and second performance script in the background
cd ../../
$BASH ./$FIRST_PERF_SCRIPT &
$BASH ./$SECOND_PERF_SCRIPT &

# starts compling the kernel, the -j4 indicates 4 cores will be used
cd workdir/linux; $MAKE -j4 zImage modules dtbs

# sends a USR1 signal to first performance script so it can exit, then kills the process
$SUDO $PKILL --signal USR1 -f $FIRST_PERF_SCRIPT

# sends a USR2 signal to second performance script so it can reset led and exit, then kills the process
$SUDO $PKILL --signal USR2 -f $SECOND_PERF_SCRIPT

# installs the kernel modules
$SUDO $MAKE modules_install

# copys the neccesary files to the /boot folder
$SUDO $CP arch/arm/boot/dts/*.dtb /boot/
$SUDO $CP arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
$SUDO $CP arch/arm/boot/dts/overlays/README /boot/overlays/
$SUDO $CP arch/arm/boot/zImage /boot/$KERNEL.img

# reboots Pi to load up the new kernel
$SUDO $REBOOT
